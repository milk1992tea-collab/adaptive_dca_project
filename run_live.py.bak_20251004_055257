# service daemon wrapper for run_live.py
import time
import logging
import traceback
import subprocess
from datetime import datetime

# 若 run_live.py 其他地方定義了 main，請確保這裡可見
# import your modules / functions if needed
# from your_module import main

logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s %(levelname)s %(name)s %(message)s")

def sanitize_for_log(s):
    try:
        if s is None:
            return ''
        return str(s).replace('\\r','').replace('\\n','').replace('
','').replace('\\\\
','')
    except Exception:
        return str(s)

def safe_git(cmd_args):
    try:
        out = subprocess.check_output(cmd_args, stderr=subprocess.STDOUT, shell=False)
        return out.decode("utf8", errors="ignore").strip()
    except Exception:
        return ""

def _service_main_loop():
    # 若你的啟動函式不是 main()，將下方 main() 換成實際啟動函式名
    while True:
        try:
            main()
        except Exception as exc:
            logging.exception("Unhandled exception in service main loop: %s", exc)
            logging.error(traceback.format_exc())
            time.sleep(10)
        time.sleep(1)

def _graceful_run():
    try:
        _service_main_loop()
    except KeyboardInterrupt:
        logging.info("Service interrupted by KeyboardInterrupt, exiting gracefully")
    except SystemExit:
        logging.info("Service received SystemExit, exiting gracefully")
    except Exception:
        logging.exception("Unexpected exception in graceful runner")
    finally:
        logging.info("Service stopped")

if __name__ == "__main__":
    _graceful_run()
